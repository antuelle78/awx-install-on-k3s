---
# tasks file for awx_k3s_centosstream

- block:
    - name: Disable firewalld
      ansible.builtin.systemd:
        name: firewalld
        state: stopped
        enabled: false

    - name: Disable nm-cloud-setup.timer
      ansible.builtin.systemd:
        name: nm-cloud-setup.timer
        state: stopped
        enabled: false
      ignore_errors: true

    - name: Disable nm-cloud-setup.service
      ansible.builtin.systemd:
        name: nm-cloud-setup.service
        state: stopped
        enabled: false
      ignore_errors: true

- name: Make sure all packages are up to date
  ansible.builtin.yum:
    name: '*'
    state: latest
  register: systemstatus
  when: ansible_distribution != "Ubuntu"
  tags:
    - patchsys

- name: Reboot system if needed
  ansible.builtin.reboot:
    reboot_timeout: 240
  when: systemstatus is changed
  tags:
    - patchsys

- name: Install required packages
  ansible.builtin.dnf:
    name:
      - git
      - make
    state: present

- name: Install k3s {{ k3s_version }}
  ansible.builtin.shell: "curl -sfL https://get.k3s.io/ |
    INSTALL_K3S_VERSION={'{{ k3s_version }}'}
    sh -s - --write-kubeconfig-mode 644"
  tags:
    - k3s_install

- name: Install required packages Red Hat family
  ansible.builtin.yum:
    name:
      - git
      - make
      - python3-pip
      - curl
      - jq
    state: present
    update_cache: true
  when: ansible_os_family == "RedHat"

- name: Upgrade pip
  command: python3 -m pip install --upgrade pip
  changed_when: false

- name: Install required python modules
  ansible.builtin.pip:
    name:
      - kubernetes
      - pyOpenSSL
      - PyYAML
      - jsonpatch
    executable: pip3
  when: ansible_os_family == "RedHat"


- name: Create data directory
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: 1000
    group: 0
  with_items:
    - /data/postgres-13
    - /data/projects

- block:
    - name: Create kubeconfig directory
      ansible.builtin.file:
        path: ~/.kube
        mode: 0700
        state: directory

    - name: Create user kubectl configuration
      ansible.builtin.copy:
        src: "{{ kubeconfig_src }}"
        dest: "{{ usr_kubeconfig }}"
        mode: 0600
        remote_src: true

    - name: Create a awx namespace
      kubernetes.core.k8s:
        name: "{{ namespace_k3s }}"
        api_version: v1
        kind: Namespace
        state: present

    - name: Clone AWX operator git repository
      ansible.builtin.git:
        repo: "{{ operator_repo }}"
        dest: ~/awx-operator
        version: "{{ operator_version }}"

    - name: Deploy awx operator
      ansible.builtin.command: make deploy
      args:
        chdir: ~/awx-operator
      changed_when: false

    - name: Clean operator files build files
      ansible.builtin.file:
        path: ~/awx-operator/
        state: absent

    - name: Create base directory
      ansible.builtin.file:
        path: "{{ base_dir }}"
        state: directory

    - name: Generate selfsigned certs
      ansible.builtin.shell: openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -out ./base/tls.crt -keyout ./base/tls.key -subj "/CN={{ awx_hostname }}/O={{ awx_hostname }}" -addext "subjectAltName = DNS:{{ awx_hostname }}"
      args:
        creates: "{{ base_dir }}/tls.crt"

    - name: Copy pvc manifest to host
      ansible.builtin.template:
        src: pvc.j2
        mode: 0644
        dest: "{{ base_dir }}/pvc.yaml"

    - name: Copy pv manifest to host
      ansible.builtin.template:
        src: pv.j2
        mode: 0644
        dest: "{{ base_dir }}/pv.yaml"

    - name: Copy awx manifest to host
      ansible.builtin.template:
        src: awx-deploy.j2
        mode: 0644
        dest: "{{ base_dir }}/awx.yaml"

    - name: Copy kustomization manifest to host
      ansible.builtin.template:
        src: kustomization.j2
        mode: 0644
        dest: "{{ base_dir }}/kustomization.yaml"

    - name: Deploy kustomization manifest
      ansible.builtin.command: kubectl apply -k {{ base_dir }}/
      register: install_status

    - name: Show install status
      debug:
        var: install_status.stdout_lines

  become: false
